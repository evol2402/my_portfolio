from flask import Flask, render_template, request, flash, redirect, url_for
from flask_bootstrap import Bootstrap5
import smtplib
import os
from datetime import datetime
from form import ContactForm
from dotenv import load_dotenv

portpholio = [
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-Games', 'title': 'Breakout Game', 'description': 'This is a classic arcade-style game developed using Python, utilizing the Pygame library. The objective is to control a paddle to bounce a ball and break a wall of bricks. As the player progresses, the difficulty increases with faster ball speeds and more complex brick patterns. The game features simple yet engaging mechanics, including collision detection, power-ups, and score tracking. It serves as a fun and interactive way to practice Python programming, especially for handling game loops, user input, and graphical rendering.', 'image_title': 'Breakout', 'image_src': 'static/assets/img/portfolio/breakout.png','link':'https://github.com/evol2402/brick_breaker'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-App', 'title': 'Park Sense',
     'description': 'Parksense is an innovative project designed to automate parking ticketing systems using Python. Leveraging advanced technologies like YOLO for object detection and EasyOCR for license plate recognition, the system identifies vehicles, extracts their plate details, and generates tickets automatically. It integrates seamlessly with databases for efficient tracking and supports real-time processing of video streams. Parksense is scalable, cost-effective, and future-ready, offering a sustainable and modern solution for parking management while showcasing practical applications of Python in real-world automation.',
     'image_title': 'Park Sense', 'image_src': 'static/assets/img/portfolio/parksense.png',
     'link': 'https://github.com/evol2402/ParkSense_bram'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-Games', 'title': 'Space Invaders', 'description': 'This is a classic arcade game where the player controls a spaceship and must defend Earth from waves of alien invaders. Developed using Python and the Pygame library, the game features various levels, increasing difficulty, and interactive gameplay. The player can move the spaceship horizontally and shoot missiles to destroy the invading aliens while avoiding their attacks. The project showcases my ability to implement game mechanics, event handling, and collision detection in Python.', 'image_title': 'Space Invaders', 'image_src': 'static/assets/img/portfolio/invaders.png','link':'https://github.com/evol2402/space_invaders'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-Scraper', 'title': 'NBA Leaderboard Insights', 'description': 'This project uses web scraping techniques to collect and analyze data from various NBA player statistics websites. By utilizing Python libraries such as BeautifulSoup and requests, the project extracts real-time leaderboard data, including points, assists, rebounds, and other key player performance metrics. The data is then processed and visualized using libraries like Pandas and Matplotlib to generate insightful trends and comparisons. This project provides a deeper understanding of player performance throughout the NBA season, with capabilities for comparing players, tracking their progress, and displaying rankings based on various statistical categories.', 'image_title': 'Web Scraping', 'image_src': 'static/assets/img/portfolio/nba.png','link':'https://github.com/evol2402/web_scraper'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-Games', 'title': 'Pong Game', 'description': "The Pong Game is a classic arcade-style game built using Python. It simulates a two-player ping pong game, where players control paddles and try to bounce a ball past each other's paddle to score points. The game logic includes collision detection, score tracking, and real-time gameplay mechanics. The project was developed using Python's Pygame library to handle graphics and user inputs, providing an interactive and engaging experience. This project demonstrates proficiency in game development fundamentals such as event handling, collision detection, and real-time game loop management.", 'image_title': 'Pong Game', 'image_src': 'static/assets/img/portfolio/pong.png','link':'https://github.com/evol2402/pong_game'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-App', 'title': 'Watermark App', 'description': 'This Python-based application allows users to add custom watermarks to images with ease. Designed for both personal and professional use, the app enables users to overlay text or logos onto their images to protect copyrights or brand materials. The application features a simple and intuitive interface, with options to adjust watermark size, position, transparency, and font style. It supports batch processing, making it ideal for handling multiple images at once. The app utilizes libraries such as Pillow for image processing and Tkinter for the user interface.', 'image_title': 'Watermark App', 'image_src': 'static/assets/img/portfolio/watermark.png','link':'https://github.com/evol2402/Watermarking_tk'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-App', 'title': 'Coffee App', 'description': "The Coffee App is a user-friendly mobile application developed to help coffee enthusiasts discover and track their favorite coffee types, roasts, and brewing methods. Built using Python, this app allows users to search for different coffee beans, save personalized preferences, and access detailed information about each coffee's origin, flavor profile, and recommended brewing techniques. The app also features a coffee rating system, where users can review and rate their coffee experiences. Additionally, it includes a brewing timer and tips for optimal coffee preparation, making it a perfect companion for coffee lovers.", 'image_title': 'Coffee seeker App', 'image_src': 'static/assets/img/portfolio/coffee.png','link':'https://github.com/evol2402/cafe_wifi_website'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-App', 'title': 'Toronto Transit', 'description': "The Toronto Transit App is a user-friendly mobile app that provides real-time updates for Toronto's transit system, including subways, streetcars, and buses. It offers live data from the TTC, helping you plan your journey, stay informed about schedule changes, and navigate the city efficiently.", 'image_title': 'Transit seeker App', 'image_src': 'static/assets/img/portfolio/transit.png','link':'https://transithub.onrender.com'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-App', 'title': 'Ghost Writer App', 'description': 'The Ghost Writer App is a Python-based application designed to help users generate written content effortlessly. By utilizing Natural Language Processing (NLP) techniques and machine learning models, the app assists users in creating articles, blog posts, or creative writing pieces based on provided prompts or keywords. It features an intuitive user interface that allows for easy input and output, along with the ability to refine and enhance the generated content. The app is ideal for content creators, marketers, or anyone seeking inspiration for their writing projects.', 'image_title': 'Ghost Writer App', 'image_src': 'static/assets/img/portfolio/ghost_writer.png','link':'https://ghost-writer-sg0r.onrender.com/'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-App', 'title': 'To Do List App', 'description': "This Python-based To-Do List application allows users to create, manage, and track their tasks efficiently. Featuring an intuitive interface, the app allows users to add new tasks, mark them as completed, and delete or edit existing tasks. Built using Python, this app leverages libraries such as Tkinter for the graphical user interface (GUI) and integrates with a local file system or database to store task data. It's designed to enhance productivity by providing users with a simple yet effective way to stay organized and keep track of their responsibilities.", 'image_title': 'To Do List App', 'image_src': 'static/assets/img/portfolio/to_do_list.png','link':'https://effortlesstasks.onrender.com'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-App', 'title': 'Ecommerce', 'description': "This project is an e-commerce website developed using Python's Flask framework. It features a user-friendly interface for browsing products, adding them to a shopping cart, and completing purchases through a secure checkout system. The website includes user authentication, product search functionality, and an admin panel for managing product listings, user accounts, and orders. Flask was used for building the backend, while HTML, CSS, and JavaScript were utilized for the frontend, providing a seamless and dynamic user experience. This project showcases the ability to build scalable and interactive web applications using Python and Flask.", 'image_title': 'Ecommerce', 'image_src': 'static/assets/img/portfolio/ecommerce.png','link':'https://github.com/evol2402/shop_sleek'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-App', 'title': 'Type Speed App', 'description': "The Type Speed App is a Python-based application designed to test and improve typing speed and accuracy. It presents random text for the user to type within a specified time limit, recording words per minute (WPM) and accuracy. The app provides real-time feedback and tracks progress, offering a fun and interactive way to enhance typing skills. Key features include a timer, a customizable difficulty level, and a history log to monitor performance over time. This project utilizes Python's built-in libraries to handle user input, timing, and text manipulation, making it a simple yet effective tool for typing practice.", 'image_title': 'Type Speed', 'image_src': 'static/assets/img/portfolio/type.png','link':'https://github.com/evol2402/type_speed_test'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-App', 'title': 'Color Sage', 'description': "The Color Sage is a Python-based tool designed to help users select and identify colors. With a user-friendly interface, this app allows users to input color codes (HEX, RGB, etc.) and instantly view the corresponding color on the screen. It also provides the ability to extract color values from images, making it a useful tool for designers, developers, and anyone working with color-based design. Built with Python libraries like Tkinter for the graphical user interface (GUI), this app demonstrates the integration of GUI development and color manipulation techniques in Python.", 'image_title': 'Color Picker', 'image_src': 'static/assets/img/portfolio/color.png','link':'https://color-pallet-poth.onrender.com'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-Games', 'title': 'Tic Tac Toe', 'description': 'This is a classic implementation of the Tic Tac Toe game, developed using Python. The project features a user-friendly interface where two players can take turns to play, either on the same computer or through simulated AI. It includes game logic to detect winning conditions, handle invalid moves, and display the current game status after each turn. The project allows for customization, such as switching between a player vs player or player vs AI mode. The primary goal of this project was to enhance my understanding of algorithms, decision-making processes, and Python’s capabilities for creating interactive applications.', 'image_title': 'Bale Bale te shawa shawa piyo piyo teh kawa kawa', 'image_src': 'static/assets/img/portfolio/tic.png','link':'https://github.com/evol2402/tic_tac_toe'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-API', 'title': 'Stock API', 'description': 'This project is a Python-based application designed to fetch real-time stock market data. Using a combination of third-party APIs (such as Alpha Vantage or Yahoo Finance), the Stock API allows users to retrieve information on stock prices, market trends, and historical data. It offers a user-friendly interface to search for specific stocks and view their performance, making it a valuable tool for investors and financial analysts to monitor market movements and make informed decisions. The API is built with robust error handling and efficient data processing to ensure reliability and accuracy.', 'image_title': 'Games 1', 'image_src': 'static/assets/img/portfolio/stock_api.png','link':'https://github.com/evol2402/stock_news'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-API', 'title': 'PDF TO AUDIOBOOK', 'description':'This project involves converting PDF documents into audio format. Using Python, it extracts the text from the PDF and then uses a text-to-speech (TTS) engine to generate an audiobook. The script allows users to input a PDF file, processes the text content, and converts it into a clear and natural-sounding audio narration. This project leverages libraries like PyPDF2 for PDF handling and gTTS or pyttsx3 for speech synthesis, making it a useful tool for people who prefer auditory learning or need assistance in reading documents.', 'image_title': 'PDF TO AUDIOBOOK', 'image_src': 'static/assets/img/portfolio/audio_book.png','link':'https://github.com/evol2402/pdf_to_audiobook'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-Data', 'title': 'Real Estate Analytics', 'description': 'This project involves analyzing real estate data to uncover insights and trends in the housing market. Using Python, the project processes data from multiple sources, including property listings, historical sales data, and demographic information. The analysis focuses on identifying key factors that influence property prices, such as location, square footage, and neighborhood characteristics. Visualization tools like Matplotlib and Seaborn are used to present data patterns, while machine learning techniques are applied to predict future property values. This project demonstrates the power of data analytics in making informed decisions in the real estate industry.', 'image_title': 'bot 2', 'image_src': 'static/assets/img/portfolio/d1.png','link':'https://colab.research.google.com/drive/1kCC5YUZ99_Er_VOPXHAaHvA_kBcu54p3'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-Data', 'title': 'Google Analytics', 'description': "This analytical project involves exploring and analyzing a dataset of Google Play Store apps using Python. The project focuses on extracting insights into app categories, user ratings, pricing strategies, and download trends. Key tasks include cleaning and preprocessing the data, visualizing trends with libraries like Matplotlib and Seaborn, and applying statistical techniques to uncover patterns, such as the relationship between ratings and app categories or pricing. The project demonstrates proficiency in Python's data manipulation and visualization tools while providing actionable insights for app developers and marketers.", 'image_title': 'google play ', 'image_src': 'static/assets/img/portfolio/google_play.png','link':'https://colab.research.google.com/drive/1MepsPrvC4YxQ1RW5SgVZaJf98cgUwA2i'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-Data', 'title': 'Data Analytics', 'description': 'This project involves the application of Python-based data analysis techniques to process, analyze, and visualize large datasets. Using libraries such as Pandas, NumPy, and Matplotlib, the project demonstrates skills in data cleaning, data manipulation, statistical analysis, and creating insightful visualizations. The aim is to extract meaningful patterns and trends from raw data, which can be used for decision-making and predictive analytics. The project may include the use of machine learning algorithms for advanced insights and recommendations.', 'image_title': 'API 2', 'image_src': 'static/assets/img/portfolio/d2.png','link':'https://colab.research.google.com/drive/1rO5IsO1bSVUMLIXTAGYrTJs-sf2-MJwe'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-bot', 'title': 'Spotify Bot', 'description': 'This project is a Python-based bot designed to interact with the Spotify API. It allows users to search for songs, playlists, and artists, as well as retrieve detailed information such as track duration, album names, and release dates. The bot can be integrated with messaging platforms like Discord or Telegram, enabling users to easily request song information or even control playback on Spotify directly through the chat interface. The project demonstrates the use of Python libraries such as spotipy for Spotify API integration, along with handling asynchronous tasks and providing a seamless user experience.', 'image_title': 'Games 2', 'image_src': 'static/assets/img/portfolio/spotify_bot.png','link':'https://github.com/evol2402/spotify'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-Scraper', 'title': 'Amazon Scraper', 'description': "The Amazon Bot is a Python-based automation tool designed to streamline the process of product tracking and price monitoring on Amazon. By using web scraping techniques, the bot fetches real-time data on product prices, availability, and ratings. It can be customized to alert users when specific products fall below a target price or when there are significant changes in product details. The bot employs libraries such as BeautifulSoup and Selenium to extract information and can send notifications via email or messaging platforms, ensuring users stay updated on their desired items. This project demonstrates the use of web scraping, automation, and Python's integration with various APIs.", 'image_title': 'bot 3', 'image_src': 'static/assets/img/portfolio/amazon_bot.png','link':'https://github.com/evol2402/amazon_scraper'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-API', 'title': 'Quiz API', 'description': "This project is a Python-based API designed to facilitate the creation, management, and retrieval of quizzes. The API allows users to create custom quizzes with multiple-choice questions, store and retrieve quiz data, and track user scores. It leverages Python's Flask framework for backend development, providing endpoints for quiz management, user interactions, and scoring systems. The project aims to offer a simple yet powerful solution for anyone looking to integrate quizzes into their websites or apps, with features such as random question selection and difficulty level customization.", 'image_title': 'API 3', 'image_src': 'static/assets/img/portfolio/quiz_api.png','link':'https://github.com/evol2402/quizzler-app'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-API', 'title': 'Plane API', 'description': "The Plane API is a Python-based project that provides a set of endpoints for managing and retrieving data about flights, airports, and airline schedules. This project allows users to interact with real-time flight data, including tracking flight statuses, obtaining airport information, and searching for available flights. The API is designed for scalability and ease of use, leveraging Python's powerful libraries such as Flask and SQLAlchemy to handle data requests and provide accurate, real-time responses. This project is ideal for developers building travel-related applications or services that require access to flight and airport information.", 'image_title': 'Games 2', 'image_src': 'static/assets/img/portfolio/plane_api.png','link':'https://github.com/evol2402/flight_search'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-bot', 'title': 'Insta Bot', 'description': 'Insta Bot is an automated Python-based tool designed to interact with Instagram, enabling users to perform tasks like liking, commenting, and following based on specified criteria. This bot uses Instagram’s API and web scraping techniques to automate repetitive actions, making social media management more efficient. It can be customized to target specific hashtags, user profiles, or locations, and is equipped with features to help users grow their Instagram presence by engaging with potential followers. The project showcases the use of Python for web automation and social media interaction, demonstrating skills in API usage and data scraping.', 'image_title': 'Games 3', 'image_src': 'static/assets/img/portfolio/insta_bot.jpg','link':'https://github.com/evol2402/insta_bot'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-bot', 'title': 'Dino Bot', 'description': 'Dino Bot is an automation script designed to play the popular Chrome Dino game. Using Python, this project leverages the power of computer vision and machine learning to detect obstacles in the game and trigger actions accordingly, allowing the bot to play autonomously. By utilizing libraries such as PyAutoGUI for simulating keyboard inputs and OpenCV for real-time image processing, the bot is able to navigate the game, jump over obstacles, and run continuously without human intervention. This project demonstrates the practical use of automation in gaming, computer vision, and bot development.', 'image_title': 'Dino Bot', 'image_src': 'static/assets/img/portfolio/dino.png','link':'https://github.com/evol2402/dino_auto'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-bot', 'title': 'Alexa skill','description': 'This Alexa skill allows users to search for song details by providing lyrics. The skill leverages the Genius API along with web scraping techniques to retrieve song information from the Genius website. Built using Python, it extracts relevant song details such as the title, artist, and album, providing users with an intuitive and interactive way to discover more about their favorite tracks. The skill enhances the Alexa experience by integrating real-time web data and offering a seamless user interface through voice commands.', 'image_title': 'Alexa skill', 'image_src': 'static/assets/img/portfolio/alexa.png','link':'https://github.com/evol2402/alexa_skill'},
    {'div_class': 'col-lg-4 col-md-6 portfolio-item isotope-item filter-Data', 'title': 'Deaths involving Police in the United States','description': 'This project focuses on analyzing data related to fatalities involving police officers in the United States. Using Python, the project processes and visualizes datasets that include information on incidents of police-involved deaths, examining patterns across various factors such as location, race, age, gender, and the circumstances of the incidents. The analysis leverages libraries such as Pandas for data manipulation, Matplotlib and Seaborn for visualizations, and Scikit-learn for statistical modeling. The project aims to provide insights into trends over time and offer a clearer understanding of how police-related fatalities vary by demographic factors, helping to inform discussions on police reform and public safety.', 'image_title': 'Death Rate', 'image_src': 'static/assets/img/portfolio/police.png','link':'https://colab.research.google.com/drive/1E8x5qqcVqz-AviZgq32k4clXF_W1NK8E'}

]

app = Flask(__name__)
app.config['SECRET_KEY'] =os.environ.get('FLASK_KEY')

load_dotenv()

MAIL_ADDRESS = os.environ.get("EMAIL_KEY")
MAIL_APP_PW = os.environ.get("PASSWORD_KEY")
def send_email(name, email, subject, message):
    email_message = f"Subject: {subject}\n\nName: {name}\nEmail: {email}\nMessage: {message}"
    with smtplib.SMTP("smtp.gmail.com", 587) as connection:
        connection.starttls()
        connection.login(MAIL_ADDRESS, MAIL_APP_PW)
        connection.sendmail(MAIL_ADDRESS, email, email_message)


def calculate_age(birthdate: str) -> int:
    # Convert the birthdate string to a datetime object
    birth_date = datetime.strptime(birthdate, "%Y-%m-%d")

    # Get the current date
    current_date = datetime.now()

    # Calculate the difference in years
    age = current_date.year - birth_date.year

    # Adjust if the birthday hasn't occurred yet this year
    if current_date.month < birth_date.month or (
            current_date.month == birth_date.month and current_date.day < birth_date.day):
        age -= 1

    return age

# Initialize Bootstrap for your Flask app
Bootstrap5(app)

@app.context_processor
def inject_year():
    return {'current_year': datetime.now().year,'age': calculate_age("2004-05-05")}

# Define routes
@app.route('/')
def home():
    return render_template('index.html')

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/resume')
def resume():
    return render_template('resume.html')

@app.route('/portfolio')
def portfolio():
    global portpholio
    return render_template('portfolio.html',portpholio=portpholio)

@app.route('/contact', methods=['GET', 'POST'])
def contact():
    form = ContactForm()

    if form.validate_on_submit():
        name = form.name.data
        email = form.email.data
        subject = form.subject.data
        message = form.message.data

        try:
            # Send the email
            send_email(name, email, subject, message)
            flash('Your message has been sent successfully!', 'success')
        except Exception as e:
            flash(f'An error occurred: {e}', 'danger')

        return redirect(url_for('contact'))

    return render_template('contact.html', form=form)

# Start the Flask app
if __name__ == "__main__":
    app.run(debug=True, port=5001)
